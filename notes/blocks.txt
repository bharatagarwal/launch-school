yield
---
methods that accept blocks have a way of transferring control from calling method to block and back again. This can be done via the `yield` keyword: you're yielding to the block.

"Methods are defined with parameters, but they are called with arguments."
---

def method
  yield
end

method # => LocalJumpError: no block given.
---

If an instance variable is inherited by an instance of a subclass,
being specific to an instance object of the class hierarchy
why isn't an class instance variable inherited by 

subclass inherits class variable
subclass instance inherits instance variable
---

Block are not objects, and can't be saved to variables.
A proc can be thought of as a saved block.

cube = proc { |n| n ** 3 }

[1, 2, 3].collect!(&cube)
# ==> [1, 8, 27]
[4, 5, 6].map!(&cube)
# ==> [64, 125, 216]

The & is used to convert a proc into a block (since .collect! and .map! normally take a block). We'll do this any time we pass a proc to a method that expects a block.
----

def greeter()
  yield
end

phrase = Proc.new { puts "Hello there!"}

greeter(&phrase)

proc passed in as argument with & operator during method invocation becomes a block, that can be yielded.
---

def lambda_demo(a_lambda)
  puts "I'm the method!"
  a_lambda.call
end

lambda_demo(lambda { puts "I'm the lambda!" })

lambda can be a nimble piece of code.
----

lambda vs proc

lambda will throw an error if you don't pass in the right number of arguments -- whereas a proc will ignore unexpected arguments, and assign nil to any that are missing.

when a lambda returns, it passes control back to the calling method. when a proc returns, it does not go back to the calling method.