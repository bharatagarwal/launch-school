# did anyone do the enumerator?

class Bst
  attr_reader :data, :left, :right
  def initialize(data)
    @data = data
    @left = nil
    @right = nil
  end

  def insert(new_data)
    if new_data <= @data
      @left ? @left.insert(new_data) : @left = Bst.new(new_data)
    else
      @right ? @right.insert(new_data) : @right = Bst.new(new_data)
    end
  end

  def each(&block)
    return to_enum(:each) unless block_given?
    puts "Trying left ..."
    left.each(&block) if left
    #left&.each(&block)
    puts "Went left."
    yield data
    puts "Yielded #{data}"
    right.each(&block) if right
    puts "Went right."

    # enum = Enumerator.new do |y|
    #   left.each { |n| y << n } if left 
    #   y << @data
    #   right.each { |n| y << n } if right
    # end

    # block_given? ? enum.each(&block) : enum
  end
end


#   def each
#     result = []
#     traverse(self, result)
#     block_given? ? result.each { |data| yield data } : result.each
#   end

#   def traverse(node, result)
#     return if node == nil
#     traverse(node.left, result)
#     result << node.data
#     traverse(node.right, result)
#   end

    

# def tree_sort(array=[])
#     left.tree_sort(array) if left
#     array << data
#     right.tree_sort(array) if right
#     array
#   end

#        4
#      /   \
#    /      \
#   2        6
#  / \      / \
# 1   3    5   7


four = Bst.new 4
four.insert 2
four.insert 6
four.insert 1
four.insert 3
four.insert 7
four.insert 5
four.each { |n| p n }

# Trying left ...
# Trying left ...
# Trying left ...
# Went left.
# 1
# Yielded 1
# Went right.
# Went left.
# 2
# Yielded 2
# Trying left ...
# Went left.
# 3
# Yielded 3
# Went right.
# Went right.
# Went left.
# 4
# Yielded 4
# Trying left ...
# Trying left ...
# Went left.
# 5
# Yielded 5
# Went right.
# Went left.
# 6
# Yielded 6
# Trying left ...
# Went left.
# 7
# Yielded 7
# Went right.
# Went right.
# Went right.

def to_a
  [left.to_a, data, right.to_a].flatten
end