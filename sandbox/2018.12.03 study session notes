class FrequencyChange
  def initialize
    @changes = File.readlines("input.txt").map { |line| line.chomp.to_i }
    @frequency = 0
  end

  def findDuplicateFrequency
    foundFreqs = Hash.new(false)
    
    @changes.cycle do |change|
      @frequency += change
      break if foundFreqs[@frequency]
      foundFreqs[@frequency] = true
    end
    return @frequency
  end
end

# --

input = File.read('./input.txt')

def convert_to_array(string)
  string.split("\n").map { |str_num| eval(str_num) }
end

def find_duplicate(string)
  frequency_changes = convert_to_array(string)
  # [2, 5, -3...]
  frequencies = {}
  index = 0
  current_frequency = 0

  loop do
    current_frequency += frequency_changes[index]
    return current_frequency if frequencies[current_frequency] == 1
    frequencies[current_frequency] = 1
    index += 1
    index = 0 if index == frequency_changes.size
  end
end

# --

string.chars.each_with_object(Hash.new(0)) do |char, char_count|
  char_count[char] += 1
end

# --

class BoxIdScan
  def initialize
    @ids = File.readlines("input.txt").map!(&:chomp)
  end

  def scan
    counter = @ids.each_with_object({twice: 0, thrice: 0}) do |id, c|
      c[:twice] += 1 if id.chars.uniq.any? { |ch| id.count(ch) == 2 }
      c[:thrice] += 1 if id.chars.uniq.any? { |ch| id.count(ch) == 3 }
    end
    counter[:twice] * counter[:thrice]
  end
end

# part 2

class BoxIdScan
  def initialize
    @ids = File.readlines("input.txt").map(&:chomp)
  end

  def findCorrectIds
    @ids.each_with_index do |id1, idx|
      @ids[idx+1..@ids.size].each do |id2| 'abc' 'abd' [['a', 'a'], ['b', 'b'], ['c', 'd']
        difference = id1.chars.zip(id2.chars).select { |ch1, ch2| ch1 != ch2 }.count
        return [id1, id2] if difference == 1
      end
    end
  end
end

combination